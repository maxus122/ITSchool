//{============================================================================
//! @brief	Главная страница системы помощи
//}============================================================================

    #include "TXLib.h"
    #include <stdio.h>
    #include <stdlib.h>
    #include <time.h>
    #define LEN 200000

/*! 	@mainpage Титульная страница
		@section 	MainPage 	HeRLib (Hero Return Library)
			@image html Image/Logo.png
			
			$Version: 1.0.0 $ 
			$Date: 11.06.2020 $
			$Copyright: (C) CatDev (Maxim Rozhkov, https://vk.com/cat_dev) <r.maximka@mail.ru> $

		@section    Description	Назначение 
			HeR Library - графическая библиотека для С++. <br>
			Она имеет 6 функций, которые рисуют персонажей из разных мультфильмов.(Изменить)
						
		@section 	Contents 	Разделы системы помощи (Изменить)
             -  @ref MainPage	"Информация о библиотеке"
*/

//! @defgroup Background	Задние фоны 
//! @brief   Отрисовка задних фонов игры.
//! @defgroup Heroes	Герои 
//! @brief   Отрисовка героев игры.
//! @defgroup Objects   	Объекты
//! @brief   Отрисовка объектов игры.

//{----------------------------------------------------------------------------------------------------------------
//! @class   hrButton
//! @brief   Класс для описания кнопки.
//}----------------------------------------------------------------------------------------------------------------

	class hrButton
    {
        private:
            int firstX;
            int firstY;
            int secondX;
            int secondY;
            int layout;

        public:

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Конструктор класса.
//!
//! @param   valueFirstX   Начальная точка по X (Верхний левый угол).
//! @param   valueFirstY   Начальная точка по Y (Верхний левый угол).
//! @param   valueSecondX   Противоположная точка по X (Нижний правый угол).
//! @param   valueSecondY   Противоположная точка по Y (Нижний правый угол).
//! @param   valueLayout   Номер сцены, на которой находится кнопка.
//}----------------------------------------------------------------------------------------------------------------

            hrButton(int valueFirstX, int valueFirstY, int valueSecondX, int valueSecondY, int valueLayout)
            {
                firstX = valueFirstX; 
                firstY = valueFirstY;
                secondX = valueSecondX; 
                secondY = valueSecondY;
                layout = valueLayout;
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, проверяющая нажата ли кнопка.
//!
//! @param   valueLayout   Номер сцены, на которой находится кнопка.
//!
//! @return  Если нажата -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            bool IsClicked(int valueLayout)
            {
                RECT Collision = {firstX, firstY, secondX, secondY};
                if(GetAsyncKeyState(VK_LBUTTON))
                {
                    if(In(txMousePos(), Collision))
                    {  
                        if(layout == valueLayout)
                        {
                            return true;
                        }else{
                            return false;
                        }
                    }
                }
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной FirstX.
//!
//! @return  Переменная объекта FirstX.
//}----------------------------------------------------------------------------------------------------------------
            
			int GetFirstX() { return firstX; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной FirstY.
//!
//! @return  Переменная объекта FirstY.
//}----------------------------------------------------------------------------------------------------------------

            int GetFirstY() { return firstY; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной SecondX.
//!
//! @return  Переменная объекта SecondX.
//}----------------------------------------------------------------------------------------------------------------

            int GetSecondX() { return secondX; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной SecondY.
//!
//! @return  Переменная объекта SecondY.
//}----------------------------------------------------------------------------------------------------------------

            int GetSecondY() { return secondY; }
    };

//{----------------------------------------------------------------------------------------------------------------
//! @class   hrCollector
//! @brief   Класс для описания героя -  собиратель ресурсов.
//}----------------------------------------------------------------------------------------------------------------

class hrCollector
    {
        private:
            int x;
            int y;
            int rotate;
            int animation;
            int frame;
            int IsCreated;
            int collectVegetables;
            
        public:

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Конструктор класса.
//}----------------------------------------------------------------------------------------------------------------

            hrCollector()
            {
                rotate = 0;
                animation = 1;
                frame = 1;
                IsCreated = 0;
                collectVegetables = -1;
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение зактрытым переменным X и Y.
//!
//! @param   valueX   Значение X.
//! @param   valueY   Значение Y.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetCoordinate(int valueX, int valueY) {x = valueX; y = valueY; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной IsCreated (Создан персонаж или нет).
//!
//! @param   valueState   Значение IsCreated.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetState(int valueState) { IsCreated = valueState; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной rotate.
//!
//! @param   valueRotate   Значение rotate.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetRotate(int valueRotate) { rotate = valueRotate; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной animation.
//!
//! @param   valueAnimation   Значение animation.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetAnimation(int valueAnimation) { animation = valueAnimation; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной frame.
//!
//! @param   valueFrame   Значение frame.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetFrame(int valueFrame) {frame = valueFrame;}

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной collectVegetables (Номер овоща, который собирает персонаж).
//!
//! @param   valueCollectVegetables   Значение collectVegetables.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetCollectVegetables(int valueCollectVegetables) {collectVegetables = valueCollectVegetables;}

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция смены анимации кадра.
//!
//! @param   NowFrame   Номера нынешнего кадра.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void Frames(int NowFrame)
            {
                if(NowFrame == 1)
                {
                    frame = 2;
                }
                if(NowFrame == 2)
                {
                    frame = 3;
                }
                if(NowFrame == 3)
                {
                    frame = 1;
                }
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, проверяющая, находится ли персонаж у собираемого объекта.
//!
//! @param   vegetablesNumber   Номера собираемого объекта.
//! @param   vegetablesUpgrade   Уровень прокачки овощей.
//!
//! @return  Если находится на позиции -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            bool InPosition(int vegetablesNumber, int vegetablesUpgrade)
            {
                switch(vegetablesNumber)
                {
                    case 1:
                        switch(vegetablesUpgrade)
                        {
                            case 1:
                                if(In(x, 288, 333))
                                {
                                    return true;
                                }
                                break;
                            case 2:
                                if(In(x, 288, 324))
                                {
                                    return true;
                                }
                                break;
                            case 3:
                                if(In(x, 288, 321))
                                {
                                    return true;
                                }
                                break;
                        }
                        break;
                    case 2:
                        switch(vegetablesUpgrade)
                        {
                            case 1:
                                if(In(x, 335, 380))
                                {
                                    return true;
                                }
                                break;
                            case 2:
                                if(In(x, 335, 371))
                                {
                                    return true;
                                }
                                break;
                            case 3:
                                if(In(x, 335, 368))
                                {
                                    return true;
                                }
                                break;
                        }
                        break;
                    case 3:
                        switch(vegetablesUpgrade)
                        {
                            case 1:
                                if(In(x, 380, 425))
                                {
                                    return true;
                                }
                                break;
                            case 2:
                                if(In(x, 380, 416))
                                {
                                    return true;
                                }
                                break;
                            case 3:
                                if(In(x, 380, 413))
                                {
                                    return true;
                                }
                                break;
                        }
                        break;
                    case 4:
                        switch(vegetablesUpgrade)
                        {
                            case 1:
                                if(In(x, 425, 470))
                                {
                                    return true;
                                }
                                break;
                            case 2:
                                if(In(x, 425, 461))
                                {
                                    return true;
                                }
                                break;
                            case 3:
                                if(In(x, 425, 458))
                                {
                                    return true;
                                }
                                break;
                        }
                        break;
                    case 5:
                        switch(vegetablesUpgrade)
                        {
                            case 1:
                                if(In(x, 470, 515))
                                {
                                    return true;
                                }
                                break;
                            case 2:
                                if(In(x, 470, 506))
                                {
                                    return true;
                                }
                                break;
                            case 3:
                                if(In(x, 470, 503))
                                {
                                    return true;
                                }
                                break;
                        }
                        break;
                    case 6:
                        switch(vegetablesUpgrade)
                        {
                            case 1:
                                if(In(x, 520, 565))
                                {
                                    return true;
                                }
                                break;
                            case 2:
                                if(In(x, 520, 556))
                                {
                                    return true;
                                }
                                break;
                            case 3:
                                if(In(x, 520, 553))
                                {
                                    return true;
                                }
                                break;
                        }
                        break;
                }
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной .
//!
//! @return  Переменная объекта X.
//}----------------------------------------------------------------------------------------------------------------

            int GetX() { return x; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной Y.
//!
//! @return  Переменная объекта Y.
//}----------------------------------------------------------------------------------------------------------------

            int GetY() { return y; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной rotate.
//!
//! @return  Переменная объекта Y.
//}----------------------------------------------------------------------------------------------------------------

            int GetRotate() { return rotate; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной animation.
//!
//! @return  Переменная объекта animation.
//}----------------------------------------------------------------------------------------------------------------

            int GetAnimation() { return animation; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной SecondY.
//!
//! @return  Переменная объекта frame.
//}----------------------------------------------------------------------------------------------------------------

            int GetFrame() { return frame; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной IsCreated.
//!
//! @return  Переменная объекта IsCreated.
//}----------------------------------------------------------------------------------------------------------------

            int GetState() { return IsCreated; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной collectVegetables (Номер овоща, который собирает персонаж).
//!
//! @return  Переменная объекта collectVegetables.
//}----------------------------------------------------------------------------------------------------------------

            int GetCollectVegetables() { return collectVegetables; }
    };

//{----------------------------------------------------------------------------------------------------------------
//! @class   hrWoodcutter
//! @brief   Класс для описания героя -  лесоруб.
//}----------------------------------------------------------------------------------------------------------------

    class hrWoodcutter
    {
        private:
            int x;
            int y;
            int animation;
            int frame;
            int IsCreated;
            
        public:

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Конструктор класса.
//}----------------------------------------------------------------------------------------------------------------

            hrWoodcutter()
            {
                animation = 1;
                frame = 1;
                IsCreated = 0;
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваиваает значение закрытым переменным X и Y.
//!
//! @param   valueX   Значение X.
//! @param   valueY   Значение Y.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetCoordinate(int valueX, int valueY) {x = valueX; y = valueY; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной IsCreated (Создан персонаж или нет).
//!
//! @param   valueState   Значение IsCreated.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetState(int valueState) { IsCreated = valueState; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной animation.
//!
//! @param   valueAnimation   Значение animation.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetAnimation(int valueAnimation) { animation = valueAnimation; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной frame.
//!
//! @param   valueFrame   Значение frame.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetFrame(int valueFrame) {frame = valueFrame;}

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция смены анимации кадра.
//!
//! @param   NowFrame   Номера нынешнего кадра.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void Frames(int NowFrame)
            {
                if(NowFrame == 1)
                {
                    frame = 2;
                }
                if(NowFrame == 2)
                {
                    frame = 3;
                }
                if(NowFrame == 3)
                {
                    frame = 1;
                }
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение зактрытой переменной X.
//!
//! @return  Переменная объекта X.
//}----------------------------------------------------------------------------------------------------------------

            int GetX() { return x; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение зактрытой переменной Y.
//!
//! @return  Переменная объекта Y.
//}----------------------------------------------------------------------------------------------------------------

            int GetY() { return y; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение зактрытой переменной animation.
//!
//! @return  Переменная объекта animation.
//}----------------------------------------------------------------------------------------------------------------

            int GetAnimation() { return animation; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение зактрытой переменной frame.
//!
//! @return  Переменная объекта frame.
//}----------------------------------------------------------------------------------------------------------------

            int GetFrame() { return frame; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение зактрытой переменной IsCreated.
//!
//! @return  Переменная объекта IsCreated.
//}----------------------------------------------------------------------------------------------------------------

            int GetState() { return IsCreated; }
    };

//{----------------------------------------------------------------------------------------------------------------
//! @class   hrKnight
//! @brief   Класс для описания героя -  рыцарь.
//}----------------------------------------------------------------------------------------------------------------

    class hrKnight
    {
        private:
            int x;
            int y;
            int animation;
            int frame;
            int IsCreated;
            
        public:

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Конструктор класса.
//}----------------------------------------------------------------------------------------------------------------

            hrKnight()
            {
                animation = 1;
                frame = 1;
                IsCreated = 0;
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытым переменным X и Y.
//!
//! @param   valueX   Значение X.
//! @param   valueY   Значение Y.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetCoordinate(int valueX, int valueY) { x = valueX; y = valueY; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной IsCreated (Создан персонаж или нет).
//!
//! @param   valueState   Значение IsCreated.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetState(int valueState) { IsCreated = valueState; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной animation.
//!
//! @param   valueAnimation   Значение animation.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetAnimation(int valueAnimation) { animation = valueAnimation; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной frame.
//!
//! @param   valueFrame   Значение frame.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetFrame(int valueFrame) { frame = valueFrame; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция смены анимации кадра.
//!
//! @param   NowFrame   Номера нынешнего кадра.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void Frames(int NowFrame)
            {
                if(NowFrame == 1)
                {
                    frame = 2;
                }
                if(NowFrame == 2)
                {
                    frame = 3;
                }
                if(NowFrame == 3)
                {
                    frame = 1;
                }
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной X.
//!
//! @return  Переменная объекта X.
//}----------------------------------------------------------------------------------------------------------------

            int GetX() { return x; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной Y.
//!
//! @return  Переменная объекта Y.
//}----------------------------------------------------------------------------------------------------------------

            int GetY() { return y; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной animation.
//!
//! @return  Переменная объекта animation.
//}----------------------------------------------------------------------------------------------------------------

            int GetAnimation() { return animation; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной frame.
//!
//! @return  Переменная объекта frame.
//}----------------------------------------------------------------------------------------------------------------

            int GetFrame() { return frame; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной IsCreated.
//!
//! @return  Переменная объекта IsCreated.
//}----------------------------------------------------------------------------------------------------------------

            int GetState() { return IsCreated; }
    };



//{----------------------------------------------------------------------------------------------------------------
//! @class   hrArcher
//! @brief   Класс для описания героя -  лучник.
//}----------------------------------------------------------------------------------------------------------------

    class hrArcher
    {
        private:
            int x;
            int y;
            int animation;
            int frame;
            int IsCreated;
            
        public:

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Конструктор класса.
//}----------------------------------------------------------------------------------------------------------------

            hrArcher()
            {
                animation = 1;
                frame = 1;
                IsCreated = 0;
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытым переменным X и Y.
//!
//! @param   valueX   Значение X.
//! @param   valueY   Значение Y.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetCoordinate(int valueX, int valueY) { x = valueX; y = valueY; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной IsCreated (Создан персонаж или нет).
//!
//! @param   valueState   Значение IsCreated.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetState(int valueState) { IsCreated = valueState; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной animation.
//!
//! @param   valueAnimation   Значение animation.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetAnimation(int valueAnimation) { animation = valueAnimation; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая присваивает значение закрытой переменной frame.
//!
//! @param   valueFrame   Значение frame.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void SetFrame(int valueFrame) { frame = valueFrame; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция смены анимации кадра.
//!
//! @param   NowFrame   Номера нынешнего кадра.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

            void Frames(int NowFrame)
            {
                if(NowFrame == 1)
                {
                    frame = 2;
                }
                if(NowFrame == 2)
                {
                    frame = 3;
                }
                if(NowFrame == 3)
                {
                    frame = 1;
                }
            }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной X.
//!
//! @return  Переменная объекта X.
//}----------------------------------------------------------------------------------------------------------------

            int GetX() { return x; }
    
//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной Y.
//!
//! @return  Переменная объекта Y.
//}----------------------------------------------------------------------------------------------------------------

            int GetY() { return y; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной animation.
//!
//! @return  Переменная объекта animation.
//}----------------------------------------------------------------------------------------------------------------

            int GetAnimation() { return animation; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной frame.
//!
//! @return  Переменная объекта frame.
//}----------------------------------------------------------------------------------------------------------------

            int GetFrame() { return frame; }

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Функция, которая возвращает значение закрытой переменной IsCreated.
//!
//! @return  Переменная объекта IsCreated.
//}----------------------------------------------------------------------------------------------------------------

            int GetState() { return IsCreated; }
    };

















//=================================================================================================================
//{          Resources
//! @name    Добыча ресурсов
//=================================================================================================================

//{----------------------------------------------------------------------------------------------------------------
//! @ingroup Heroes
//! @brief   Отрисовка собирателя ресурсов.
//!
//! @image html Image/Collector.bmp
//!
//! @param   x   Начальная точка по X (Верхний левый угол).
//! @param   y 	Начальная точка по Y (Верхний левый угол).
//! @param   rotate 	Поворот героя (0 - в правую сторону, 1 - в левую сторону).
//! @param   animation	Номер анимации героя (1 - движение, 2 - сбор ресурсов).
//! @param   frame	Номер кадра анимации.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

	void hrDrawingCollector(int x, int y, int rotate, int animation, int frame);

//{----------------------------------------------------------------------------------------------------------------
//! @ingroup Heroes
//! @brief   Отрисовка лесоруба.
//! 
//! @image html Image/Woodcutter.bmp
//!
//! @param   x   Начальная точка по X (Верхний левый угол).
//! @param   y 	Начальная точка по Y (Верхний левый угол).
//! @param   rotate 	Поворот героя (0 - в правую сторону, 1 - в левую сторону).
//! @param   animation	Номер анимации героя (1 - движение, 2 - рубка дерева).
//! @param   frame	Номер кадра анимации.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

	void hrDrawingWoodcutter(int x, int y, int rotate, int animation, int frame);

//! @}
//}
//=================================================================================================================

//=================================================================================================================
//{          Resources
//! @name    Воины
//=================================================================================================================

//{----------------------------------------------------------------------------------------------------------------
//! @ingroup Heroes
//! @brief   Отрисовка рыцаря.
//!
//! @image html Image/Knight.bmp
//!
//! @param   x   Начальная точка по X (Верхний левый угол).
//! @param   y 	Начальная точка по Y (Верхний левый угол).
//! @param   animation	Номер анимации героя (1 - движение, 2 - удар).
//! @param   frame	Номер кадра анимации.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

	void hrDrawingKnight(int x, int y, int animation, int frame);

//{----------------------------------------------------------------------------------------------------------------
//! @ingroup Heroes
//! @brief   Отрисовка лучника.
//!
//! @image html Image/Archer.bmp
//!
//! @param   x   Начальная точка по X (Верхний левый угол).
//! @param   y 	Начальная точка по Y (Верхний левый угол).
//! @param   animation	Номер анимации героя (1 - движение, 2 - выстрел).
//! @param   frame	Номер кадра анимации.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

	void hrDrawingArcher(int x, int y, int animation, int frame);

//{----------------------------------------------------------------------------------------------------------------
//! @ingroup Heroes
//! @brief   Отрисовка мага.
//!
//! @image html Image/Wizard.bmp
//!
//! @param   x   Начальная точка по X (Верхний левый угол).
//! @param   y 	Начальная точка по Y (Верхний левый угол).
//! @param   animation	Номер анимации героя (1 - движение, 2 - выстрел).
//! @param   frame	Номер кадра анимации.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

	void hrDrawingWizard(int x, int y, int animation, int frame);

//! @}
//}
//=================================================================================================================

//=================================================================================================================
//{          Objects
//! @name    Объекты
//=================================================================================================================

//{----------------------------------------------------------------------------------------------------------------
//! @ingroup Objects
//! @brief   Отрисовка дома.
//!
//! @image html Image/Houses.bmp
//!
//! @param   x   Начальная точка по X (Верхний левый угол).
//! @param   y 	Начальная точка по Y (Верхний левый угол).
//! @param   houseUpgrade	Уровень прокачки дома.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

	void hrDrawingHouses(int x, int y, int houseUpgrade);

//{----------------------------------------------------------------------------------------------------------------
//! @ingroup Objects
//! @brief   Отрисовка овощей.
//!
//! @image html Image/Vegetables.bmp
//!
//! @param   x   Начальная точка по X (Верхний левый угол).
//! @param   y 	Начальная точка по Y (Верхний левый угол).
//! @param   frame	Номер кадра анимации.
//! @param   vegetablesUpgrade	Уровень прокачки овощей (1 - морковь, 2 - тыква, 3 - турнепс).
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

	void hrDrawingVegetables(int x, int y, int frame, int vegetablesUpgrade);

//{----------------------------------------------------------------------------------------------------------------
//! @ingroup Objects
//! @brief   Отрисовка деревьев.
//!
//! @image html Image/Trees.bmp
//!
//! @param   x   Начальная точка по X (Верхний левый угол).
//! @param   y 	Начальная точка по Y (Верхний левый угол).
//! @param   frame	Номер кадра анимации.
//! @param   treesUpgrade	Уровень прокачки деревьев (1 - елка, 2 - туя, 3 - голубая ель).
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

	void hrDrawingTrees(int x, int y, int frame, int treesUpgrade);

//{----------------------------------------------------------------------------------------------------------------
//! @ingroup Objects
//! @brief   Отрисовка кузнеца.
//!
//! @image html Image/Blacksmith.bmp
//!
//! @param   x   Начальная точка по X (Верхний левый угол).
//! @param   y 	Начальная точка по Y (Верхний левый угол).
//! @param   blacksmithFrame	Номер кадра анимации.
//!
//! @return  Если операция была успешна -- true, иначе -- false.
//}----------------------------------------------------------------------------------------------------------------

	void hrDrawingBlacksmith(int x, int y, int blacksmithFrame);

//! @}
//}
//=================================================================================================================





    class hrVegetables
    {
        private:
            int x;
            int y;
            int frame;
            bool IsCollecting;
            
        public:
            hrVegetables()
            {
                frame = 1;
                IsCollecting = 0;
            }
            void SetCoordinate(int valueX, int valueY) {x = valueX; y = valueY; }
            void SetFrame(int valueFrame) {frame = valueFrame;}
            void SetCollecting(int valueCollecting) {IsCollecting = valueCollecting;}
            void Frames(int NowFrame)
            {
                if(NowFrame == 1)
                {
                    frame = 2;
                }
                if(NowFrame == 2)
                {
                    frame = 3;
                }
                if(NowFrame == 3)
                {
                    frame = 4;
                }
            }

            int GetX() { return x; }
            int GetY() { return y; }
            int GetFrame() { return frame; }      
            bool IsCollect() { return IsCollecting; }
    };

    class hrTrees
    {
        private:
            int x;
            int y;
            int frame;
            
        public:
            hrTrees()
            {
                frame = 1;
            }
            void SetCoordinate(int valueX, int valueY) {x = valueX; y = valueY; }
            void SetFrame(int valueFrame) {frame = valueFrame;}
            void Frames(int NowFrame)
            {
                if(NowFrame == 1)
                {
                    frame = 2;
                }
                if(NowFrame == 2)
                {
                    frame = 3;
                }
                if(NowFrame == 3)
                {
                    frame = 1;
                }
            }

            int GetX() { return x; }
            int GetY() { return y; }
            int GetFrame() { return frame; }      
    };